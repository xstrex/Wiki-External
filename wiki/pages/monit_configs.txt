====== Monit ======
Monit is a utility for managing and monitoring processes, programs, files, directories and filesystems on a Unix system. Monit conducts automatic maintenance and repair and can execute meaningful causal actions in error situations. E.g. Monit can start a process if it does not run, restart a process if it does not respond and stop a process if it uses too much resources. You can use Monit to monitor files, directories and filesystems for changes, such as timestamps changes, checksum changes or size changes.

Monit is controlled via an easy to configure control file based on a free-format, token-oriented syntax. Monit logs to syslog or to its own log file and notifies you about error conditions via customisable alert messages. Monit can perform various TCP/IP network checks, protocol checks and can utilise SSL for such checks. Monit provides a HTTP(S) interface and you may use a browser to access the Monit program.

Monit can be found [[https://mmonit.com/monit/|Here]].

//Below is a default monit config, as well as a repository of config files for various services. I've used 192.168.1.1 for all examples below.//

===== Default Monitrc =====
//Applies to linux based systems, others may vary.//
<code:bash linenums:1>
###############################################################################
## Morphx Monit Default Config
## Created: 3.6.17, Rev:05
## Replace HOSTNAME with HOSTNAME
## Replace PASSWORD with new PASSWORD
###############################################################################

###############################################################################
## System
###############################################################################

  set daemon 60
  set logfile /var/log/monit.log
  set idfile /var/lib/monit/id
  set statefile /var/lib/monit/state
  set eventqueue
      basedir /var/lib/monit/events
      slots 100
  set httpd port 2812 and
    signature disable
    allow admin:PASSWORD
    allow 192.168.1.0/24
    allow 127.0.0.1

###############################################################################
## Services
###############################################################################

check system HOSTNAME
    if loadavg (1min) > 10 then alert
    if loadavg (5min) > 8 then alert
    if memory usage > 95% then alert
    if swap usage > 45% then alert
    if cpu usage (user) > 95% then alert
    if cpu usage (system) > 60% then alert
    if cpu usage (wait) > 65% then alert
check filesystem rootfs with path /
    if space usage > 70% for 5 times within 15 cycles then alert
    if space usage > 90% then alert
check filesystem bootfs with path /boot
    if space usage > 80% for 5 times within 15 cycles then alert
    if space usage > 90% then alert
#check filesystem backup with path /backup
#    if space usage > 80% for 5 times within 15 cycles then alert
#    if space usage > 90% then alert
    group server

###############################################################################
## Includes
###############################################################################
#
   include /etc/monit/conf-enabled/*
#
</code>

===== Start Monit =====
<code:bash linenums:1>
sudo service monit restart
</code>

----

====== Service Configs ======
The following shoud be placed in their own file, in: <code:bash linenums:1>/etc/monit/conf-available/[name]</code>
Then symlinked to: <code:bash linenums:1>/etc/monit/conf-enabled/</code>
//Remember to reload Monit after linking files to the enabled directory//

----

====== System Services ======
===== Rsyslogd Config =====
<code:bash linenums:1>
check process rsyslogd with pidfile /var/run/rsyslogd.pid
   group system
   start program = "/usr/sbin/service rsyslogd start"
   stop  program = "/usr/sbin/service rsyslogd stop"
   depends on rsyslogd_init
   depends on rsyslogd_rc

check file rsyslogd_init with path /lib/systemd/system/rsyslog.service
   group system
   include /etc/monit/templates/rootrc

check file rsyslogd_rc with path /etc/rsyslog.conf
   group system
   include /etc/monit/templates/rootrc
</code>

===== NTPD Config =====
<code:bash linenums:1>
check process ntpd with pidfile /var/run/ntpd.pid
   start program = "/etc/init.d/ntp start"
   stop  program = "/etc/init.d/ntp stop"
   if failed host 127.0.0.1 port 123 type udp then alert
</code>

===== Cron Config =====
<code:bash linenums:1>
check process crond with pidfile /var/run/crond.pid
   group system
   start program = "/etc/init.d/cron start"
   stop  program = "/etc/init.d/cron stop"
   depends on cron_rc
   
check file cron_rc with path /etc/init.d/cron
   group system
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor
</code>

===== Network Config =====
==== Ubuntu 16.x ====
<code:bash linenums:1>
check network eth0 with interface eth0
  start program = "/etc/init.d/networking start"
  stop program = "/etc/init.d/networking stop"
  if failed link then restart
  if changed link capacity then restart
  if saturation > 90% then alert
</code>

==== Ubuntu 17.x ====
<code:bash linenums:1>
check network eth0 with interface eth0
  start program = "/sbin/ip link set eth0 up"
  stop program = "/sbin/ip link set eth0 down"
  if failed link then restart
  if changed link capacity then restart
  if saturation > 90% then alert
</code>

----

====== Authentication Servers ======
===== Kerberos Config =====

==== Kadmin ====
<code:bash linenums:1>
check process kadmind with pidfile /var/run/kadmind.pid
   start program = "/usr/sbin/service kadmind start"
   stop program = "/usr/sbin/service kadmind stop"
   if 5 restarts within 5 cycles then timeout
</code>

==== krb5kdc ====
<code:bash linenums:1>
check process krb5kdc with pidfile /var/run/kadmind.pid
   start program = "/usr/sbin/service krb5-kdc start"
   stop program = "/usr/sbin/service krb5-kdc stop"
   if 5 restarts within 5 cycles then timeout
</code>

----

====== Backup Servers ======
===== Bacula FD (Client) =====
<code:bash linenums:1>
check process bacula with pidfile /var/run/bacula/bacula-fd.9102.pid
   start program = "/usr/sbin/service bacula-fd start"
   stop program = "/usr/sbin/service bacula-fd stop"
   if failed host 192.168.1.X port 9102 type tcp then alert
   if 5 restarts within 5 cycles then timeout
</code>

----

====== Database Servers ======
===== Mongodb Config =====
<code:bash linenums:1>
check process mongodb with pidfile /var/run/mongodb/mongodb.pid
   group database
   start program  "/usr/sbin/service mongodb start"
   stop program  "/usr/sbin/service mongodb stop"
   if 5 restarts within 5 cycles then timeout
   depends on mongodb_rc
   depends on mongodb_init

check file mongodb_rc with path /etc/mongodb.conf
   group database
   include /etc/monit/templates/rootrc

check file mongodb_init with path /lib/systemd/system/mongodb.service
   group database
   include /etc/monit/templates/rootrc
</code>

===== MySQL Config =====
<code:bash linenums:1>
check process mysql with pidfile /var/run/mysqld/mysqld.pid
   group database
   start program = "/usr/sbin/service mysql start"
   stop program = "/usr/sbin/service mysql stop"
   if failed host 127.0.0.1 port 3306 protocol mysql then restart
   if 5 restarts within 5 cycles then timeout
   depends on mysql_bin
   depends on mysql_init
   depends on mysql_rc

 check file mysql_bin with path /usr/sbin/mysqld
   group database
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor

 check file mysql_init with path /etc/init.d/mysql
   group database
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor

 check file mysql_rc with path /etc/mysql/my.cnf
   group database
   if failed checksum then unmonitor
   if failed permission 644 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor
</code>

===== Redis-Server =====
<code:bash linenums:1>
check process redis with pidfile /var/run/redis/redis-server.pid
  start program = "/usr/sbin/service redis-server start"
  stop program = "/usr/sbin/service redis-server stop"
  if failed port 6379 type tcp then restart
  depends on redis_rc

check file redis_rc with path /etc/redis/redis.conf
  if failed checksum then unmonitor
  if failed permission 640 then unmonitor
  if failed uid 111 then unmonitor
  if failed gid 117 then unmonitor
</code>

----

====== Web Servers ======
===== Apache Config =====

Hint: It is recommended to use a "token" file (an empty file) for monit to request. That way, it is easy to filter out all the requests made by monit in the httpd access log file. Here's a trick shared by Marco Ermini: place the following in httpd.conf to stop apache from logging any requests done by monit:
<code:bash linenums:1>
  SetEnvIf        Request_URI "^\/monit\/token$" dontlog
  CustomLog       logs/access.log common env=!dontlog
</code>
In some cases init scripts for apache and apache-ssl are separated, e.g. Debian Linux.
<code:bash linenums:1>
 check process apache with pidfile /opt/apache_misc/logs/httpd.pid
   group www
   start program = "/etc/init.d/apache start"
   stop  program = "/etc/init.d/apache stop"
   if failed host localhost port 80 
        protocol HTTP request "/~hauk/monit/token" then restart
   if failed host 192.168.1.1 port 443 type TCPSSL 
        certmd5 12-34-56-78-90-AB-CD-EF-12-34-56-78-90-AB-CD-EF
  protocol HTTP request http://localhost/~hauk/monit/token  then restart
   depends on apache_bin
   depends on apache_rc

 check file apache_bin with path /opt/apache/bin/httpd
   group www
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor

 check file apache_rc with path /etc/init.d/apache
   group www
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor
</code>

===== HAProxy Config =====
<code:bash linenums:1>
 check process haproxy with pidfile /run/haproxy.pid
   group system
   group haproxy
   start program = "/usr/sbin/service haproxy start"
   stop  program = "/usr/sbin/service haproxy stop"
   if failed host localhost port 80 with proto http then alert
   if 5 restarts with 5 cycles then timeout
   depend on haproxy_bin
   depend on haproxy_rc

 check file haproxy_bin with path /usr/sbin/haproxy
   group haproxy
   include /etc/monit/templates/rootbin

 check file haproxy_rc with path /etc/haproxy/haproxy.cfg
   group haproxy
   include /etc/monit/templates/rootrc
</code>

----

====== System Monitoring Servers ======
===== CollectD Config =====
<code:bash linenums:1>
check process collectd with pidfile /var/run/collectd.pid
  group stats
  start program "/etc/init.d/collectd start"
  stop program "/etc/init.d/collectd stop"
  depends on collectd_rc

check file collectd_rc with path /etc/collectd/collectd.conf
  group stats
  if failed checksum then alert
  if failed permission 644 then alert
  if failed gid root then alert
  if failed uid root then alert
</code>

===== Collectl Config =====
<code:bash linenums:1>
check process collectl with pidfile /var/run/collectl.pid
  group stats
  start program "/etc/init.d/collectl start"
  stop program "/etc/init.d/collectl stop"
  depends on collectl_rc

check file collectl_rc with path /etc/collectl.conf
  group stats
  if failed checksum then alert
  if failed permission 644 then alert
  if failed gid root then alert
  if failed uid root then alert
</code>

----

====== Multimedia Servers ======
===== Plex Media Server =====
<code:bash linenums:1>
check process plex with pidfile "/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/plexmediaserver.pid"
   start program = "/etc/init.d/plexmediaserver start"
   stop  program = "/etc/init.d/plexmediaserver stop"
   if failed host 192.168.1.1 port 32400 then restart
   if 5 restarts within 5 cycles then alert
   if memory > 250 MB then alert
   if 5 restarts within 5 cycles then timeout
</code>

----

====== Home Automation ======
===== Home-Assistant =====
<code:bash linenums:1>
check process hass with pidfile "/tmp/hass.pid"
   start program = "/usr/sbin/service home-assistant start"
   stop  program = "/usr/sbin/service home-assistant stop"
   if failed host 192.168.1.1 port 8123 then alert
   if 5 restarts within 5 cycles then alert
   if cpu > 80% then alert
   if 5 restarts within 5 cycles then timeout
   depend on hass_bin
   depend on hass_rc

check file hass_bin with path /usr/local/bin/hass
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor

check file hass_rc with path /opt/hass/configuration.yaml
   if failed checksum then unmonitor
   if failed permission 744 then unmonitor
</code>

===== OpenHAB Config =====
<code:bash linenums:1>
check process openhab
   matching "java"
   start program = "/etc/init.d/openhab start"
   stop program = "/etc/init.d/openhab stop"
   if failed host localhost port 8080 with proto http then restart
   if cpu usage > 90% for 10 cycles then restart
   if memory > 500 MB then restart
</code>

===== Domoticz Config =====
[[http://domoticz.com/|Domoticz Home Page]]
<code:bash linenums:1>
Check process Domoticz with pidfile /usr/local/domoticz/var/domoticz.pid
    start program = "/var/packages/domoticz/scripts/start-stop-status start"
    stop program  = "/var/packages/domoticz/scripts/start-stop-status stop"
    if failed host localhost port 8084 then restart
    if 3 restarts within 5 cycles then alert
    if memory > 50 MB then restart
</code>

----

====== Misc Servers ======
===== SSH Config =====
<code:bash linenums:1>
check process sshd with pidfile /var/run/sshd.pid
   group system
   group sshd
   start program = "/usr/sbin/service ssh start"
   stop  program = "/usr/sbin/service ssh stop"
   if failed host localhost port 22 with proto ssh then restart
   if 5 restarts with 5 cycles then alert
   depend on sshd_bin
   depend on sftp_bin
   depend on sshd_rc
   depend on sshd_rsa_key
   depend on sshd_dsa_key

check file sshd_bin with path /usr/sbin/sshd
   group sshd
   include /etc/monit/templates/rootbin

check file sftp_bin with path /usr/lib/openssh/sftp-server
   group sshd
   include /etc/monit/templates/rootbin

check file sshd_rsa_key with path /etc/ssh/ssh_host_rsa_key
   group sshd
   include /etc/monit/templates/rootstrict

check file sshd_dsa_key with path /etc/ssh/ssh_host_dsa_key
   group sshd
   include /etc/monit/templates/rootstrict

check file sshd_rc with path /etc/ssh/sshd_config
   group sshd
   include /etc/monit/templates/rootrc
</code>

===== Fail2Ban Config =====
<code:bash linenums:1>
check process fail2ban with pidfile /var/run/fail2ban/fail2ban.pid
   group security
   start program  "/usr/sbin/service fail2ban start"
   stop program  "/usr/sbin/service fail2ban stop"
   if 5 restarts within 5 cycles then timeout
   depends on fail2ban_rc
   depends on fail2ban_jail

check file fail2ban_rc with path /etc/fail2ban/fail2ban.conf
   group security
   include /etc/monit/templates/rootrc

check file fail2ban_jail with path /etc/fail2ban/jail.conf
   group security
   include /etc/monit/templates/rootrc
</code>


===== OctoPrint Config =====
<code:bash linenums:1>
 check process haproxy with pidfile /run/haproxy.pid
   group system
   group haproxy
   start program = "/usr/sbin/service haproxy start"
   stop  program = "/usr/sbin/service haproxy stop"
   if failed host localhost port 80 with proto http then alert
   if 5 restarts with 5 cycles then timeout
   depend on haproxy_bin
   depend on haproxy_rc

 check file haproxy_bin with path /usr/sbin/haproxy
   group haproxy
   include /etc/monit/templates/rootbin

 check file haproxy_rc with path /etc/haproxy/haproxy.cfg
   group haproxy
   include /etc/monit/templates/rootrc
</code>

===== Webcamd Config =====
<code:bash linenums:1>
 check process webcamd with pidfile /var/run/webcamd.pid
   group system
   group webcamd
   start program = "/usr/sbin/service webcamd start"
   stop  program = "/usr/sbin/service webcamd stop"
   if failed host localhost port 8080 with proto http then alert
   if 5 restarts with 5 cycles then timeout
   depend on webcamd_bin
   depend on webcamd_rc

 check file webcamd_bin with path /root/bin/webcamd
   group webcamd
   include /etc/monit/templates/rootbin

 check file webcamd_rc with path /boot/octopi.txt
   group webcamd
   include /etc/monit/templates/rootbin
</code>

===== Supervisor Config =====
<code:bash linenums:1>
check process supervisor with pidfile /var/run/supervisord.pid
   start program  "/usr/sbin/service supervisor start"
   stop program  "/usr/sbin/service supervisor stop"
   if 5 restarts within 5 cycles then timeout
   depends on supervisor_rc
   depends on supervisor_bin

check file supervisor_rc with path /etc/supervisor/supervisord.conf
   if failed checksum then alert
   if failed permission 644 then alert
   if failed uid root then alert
   if failed gid root then alert

check file supervisor_bin with path /usr/bin/supervisord
   if failed checksum then alert
   if failed permission 755 then alert
   if failed uid root then alert
   if failed gid root then alert
</code>

===== SensorReporter =====
<code:bash linenums:1>
check process sensorReporter
  matching "sensorReporter."
  start program "/usr/sbin/service sensorReporter start"
  stop program "/usr/sbin/service sensorReporter stop"
  depends on sensorReporter_rc

check file sensorReporter_rc with path /opt/sensorReporter/sensorReporter.ini
  if failed checksum then alert
  if failed permission 644 then alert
  if failed gid root then alert
  if failed uid root then alert
</code>

===== Motion Config =====
<code:bash linenums:1>
check process motion with pidfile "/var/run/motion/motion.pid"
   start program = "/etc/init.d/motion start"
   stop  program = "/etc/init.d/motion stop"
   if failed host 192.168.1.1 port 8081 then restart
   if 5 restarts within 5 cycles then alert
   if cpu > 80 then alert
   if 5 restarts within 5 cycles then timeout
   depend on motion_bin
   depend on motion_rc
   
check file motion_bin with path /usr/bin/motion
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor
   
check file motion_rc with path /etc/motion/motion.conf
   if failed checksum then unmonitor
   if failed permission 664 then unmonitor
</code>
